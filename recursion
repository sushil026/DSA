// STRING REVERSAL USING RECURSION:

// int rev( string str){
//     if( str.length()== 0){
//         return 0;
//     }
//     string r = str.substr(1);
//     rev( r);
//     cout << str[0];
// }
// int main(){
//     string str;
//     cin >> str;
//     rev(str);
//     return 0;
// }

// PI TO 3.14

void piTo3( string s){
    if( s.length()== 0){ return;}
    if( s[0]== 'p' && s[1]== 'i'){
        cout << 3.14;
        piTo3( s.substr(2));
    }
    else{
        cout << s[0];
        piTo3( s.substr(1));
    }
}
int main(){
    string str = "piIIIpiIIIpi";
    piTo3(str);
    return 0;
}

// REMOVING DUPLICATES:

void remDup( string str){
    if( str.length()== 0){
        return;
    }
    if( str[0] != str[1]){
       cout << str[0];
    }
    remDup( str.substr(1));

}
int main(){
    string str = "aaabbbbbccdeeeee";
    remDup(str);
    return 0;
}

// MOVING x TO LAST :

string moveX( string str){
    if (str.length() == 0){
        return "";
    }
    string ans = moveX(str.substr(1));
    if( str[0] == 'x'){
        return ans+str[0];
    }
    return str[0]+ans;
}
int main(){
    cout <<  moveX("axxbdixxbc");
    return 0;
}


// PERMUTATIONS OF A STRING 

void permutate( string str, string ans){
    if( str.length()== 0){
        cout << ans << endl;
        return;
    }
    for( int i =0; i< str.length(); i++){
        char ch = str[i];
        string r = str.substr(0, i) + str.substr(i+1);
        permutate( r, ans+ch);
    }
}
int main(){
    permutate( "ABCd","");
    return 0;
}

// 0/1 KNAPSACK :

int knap( int value[], int weight[], int wt, int n){
    if(n==0 || wt==0){
        return 0;
    }
    if( weight[n-1] > wt){
        return knap(value,weight,wt,n-1);
    }
    return max(knap(value,weight,wt, n-1),knap(value, weight, wt-weight[n-1], n-1)+ value[n-1]);
}
int main(){
    int wt = 50;
    int value[] = {100,50,150};
    int weight[] = {10,20,30};
    cout << knap( value, weight, wt, 3);
    return 0;
}
