#include <bits/stdc++.h>
using namespace std;
string isBalanced( string t){
	stack<char> s;
	for (int i = 0; i < t.length(); ++i){
		if( t[i]== '{'||t[i]== '['||t[i]== '('){
			s.push( t[i]);
		}
		else{
			if( s.empty()){
				if( t[i]== '}'||t[i]== ']'||t[i]== ')'){
					return "NO";
				}
			}
			if ( s.top() == '{' && t[i]== '}'){
				s.pop();
			}
			else if ( s.top() == '[' && t[i]== ']'){
				s.pop();
			}
			else if ( s.top() == '(' && t[i]== ')'){
				s.pop();
			}
			else if ( s.top() == '{' && t[i]== '}'){
				s.pop();
			}
			else{
				return "NO";
			}
		}
	}
	if (s.empty()){
		return "YESS";
	}
	return "NO";
}
int main(){
    string str;
    int t;
    cin >> t;
    for (int t_itr = 0; t_itr < t; t_itr++) {
        string s;
        cin >> s;
        string result = isBalanced(s);
        cout << result << "\n";
    }
    return 0;
}

// USING UNORDERED MAPS
#include <bits/stdc++.h>
using namespace std;
unordered_map<char,int> mapp= { {'(',-1},{'[',-2},{'{',-3},{')',1},{']',2},{'}',3} };
string isBalanced( string t){
	stack<char> s;
	for (int i = 0; i < t.length(); ++i){
		if ( mapp[t[i]] < 0){
			s.push( t[i]);
		}
		else{
			if ( s.empty()){
				return "NO";
			}
			char tt = s.top();
			s.pop();
			if ( mapp[tt] + mapp[t[i]]!= 0){
				return "NO";
			}
		}
	}
	if ( s.empty()){
		return "YES";
	}
	return "NO";
}
int main(){
    string str;
    int t;
    cin >> t;
    for (int t_itr = 0; t_itr < t; t_itr++) {
        string s;
        cin >> s;
        string result = isBalanced(s);
        cout << result << "\n";
    }
    return 0;
}
	
