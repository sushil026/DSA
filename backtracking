BACKTRACKING

RAT IN A MAZE

bool check( int x, int y, int n, vector<vector<int> > mat){
    if( x<n && y<n && mat[x][y]== 0 ){
        return true;
    }
    return false;
}
bool maze ( int x, int y, int n, vector<vector<int> > mat, vector<vector<int>> &res){
        if( x==n-1 && y==n-1){
            res[x][y] = 1;
            return true;
        }
        if(check(x,y,n,mat)){
            res[x][y] = 1;
            if( maze( x+1,y,n,mat,res)){
                return true;
            }
            if( maze( x,y+1,n,mat,res)){
                return true;
            }
            res[x][y] = 0;
            return false;
        }
        return false;
    }
int main(){
    int n = 5;
    vector<vector<int>> matr;
    vector<vector<int>> res(n, vector<int> (n, 0)); 
    vector<int> p;
    int c;
    for (int i = 0; i < n; ++i){
        for (int j = 0; j < n; ++j){
            cin >> c;
            p.push_back(c);
        } matr.push_back(p);
        p.clear();
    }
    maze(0,0,n,matr,res);
    for (int i = 0; i < n; ++i){
        for (int j = 0; j < n; ++j){
            cout << res[i][j]<< " ";
        }cout << endl;
    }
    return 0;
}

//  N-QUEEN :
bool check( int row, int col, int n, vector<vector<int>> board){
    for (int i = 0; i < row; ++i){
        if( board[i][col]==1){
            return false;
        }
    }
    int x=row, y=col;
    while( x>=0, y>=0){
        if( board[x][y]==1){
            return false;
        }
        x--; y--;
    }
    x=row, y=col;
    while( x>=0, y<n){
        if( board[x][y]==1){
            return false;
        }
        x--; y++;
    }
    return true;
}
bool chess( vector<vector<int>> &board, int n, int x){
    if ( x>=n){
        return true;
    }
    for( int i=0; i<n; i++){
        if( check(x, i, n, board)){
            board[x][i]=1;
            if( chess(board, n, x+1)){
                return true;
            }
            board[x][i]=0;
        }
    }
    return false;
}
int main(){
    int n = 4;
    vector<vector<int>> board(n,vector<int> (n,0));
    chess(board, n, 0);
    for(int i=0; i< board.size(); i++){
        for (int j = 0; j < board[i].size(); ++j){
            cout<< board[i][j]<< " ";
        } cout << endl;
    }
}

// LEETCODE WALA :
    // asd fills qwe
bool check( vector<string> asd, int n, int r, int c){
    for (int i = 0; i < n; ++i){
        if (asd[i][c] == 'Q')
            return false;
    }
    int x = r-1, y= c-1;
    while( x >=0 && y >=0){
        if (asd[x][y] == 'Q')
            return false;
        x--; y--;   
    }
    x = r-1;
    y = c+1;
    while( x >=0 && y <n){
        if (asd[x][y] == 'Q')
            return false;
        x--; y++;   
    }
    return true;
}
void chess( vector<vector<string>> &qwe, vector<string> &asd, int n, int c){
    if ( c == n){ qwe.push_back( asd);}
    for (int i = 0; i < n; ++i){
        if ( check( asd, n, c, i)){
            asd[c][i] = 'Q';
            chess( qwe, asd, n, c+1);
            asd[c][i] = '.';
        }
    }
}
int main(){
    int n= 4;
    vector<vector<string>> qwe;
    vector<string> asd( n, string( n,'.'));
    chess( qwe, asd, n, 0);
    for (int i = 0; i < n; ++i)
    {
        for (int j = 0; j < n; ++j)
        {
            cout << qwe[i][j]<< endl;
        }
        cout << endl;
    }
    return 0;
}
// FINISH
