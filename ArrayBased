#include <bits/stdc++.h>
using namespace std;

//LARGEST TILL i

// int main(){
// 	vector<int> arr = {0,-9,1,3,-4,5};
// 	vector<int> res;
// 	int mx = arr[0];
// 	res.push_back(mx);
// 	for (int i = 1; i < arr.size(); i++){
// 		mx = max(mx, arr[i]);
// 		res.push_back(mx);
// 	}
// 	for (int i = 0; i < res.size(); i++){
// 		cout<< res[i]<< " ";
	}
}

//SUM OF ALL SUBARRAYS:

// int main(){
// 	int n , x;
// 	cin>> n;
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	for (int i = 0; i < n; i++){
// 		int sum = 0;
// 		for (int j = i; j < n; j++){
// 			sum += arr[j];
// 			cout << sum<< " ";
// 		}
// 	}
// }

//LONGEST ARITHMATIC SUBARRAY:

// int main(){
// 	int n ,x;
// 	cin>> n;
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	int pd = arr[0]-arr[1], count = 2, prev = 0;
// 	for (int i =2; i < n; i++){
// 		if ((arr[i]- arr[i-1])== pd ){
// 			count++;
// 		}
// 		else{
// 			pd = arr[i] - arr[i-1];
// 			count = 2;
// 		}
// 		if (prev < count){
// 			prev = count;
// 		}
// 	}
// 	cout << prev;
// }

// RECORD BREAKER: 

// int main(){
// 	int n ,x;
// 	cin>> n;
// 	if( n == 1){
// 		cout << 1;
// 		return 0;
// 	}
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	arr.push_back( -1);
// 	int mx = arr[0],c= 0;
// 	for (int i = 0; i < n; ++i){
// 		if(mx < arr[i] && arr[i] > arr[i+1]){
// 			mx = arr[i];
// 			c++;
// 		}
// 	}
// 	cout << c;
// }

// FIRST REPEATING ELEMENT :

// int main(){
// 	int n ,x;
// 	cin>> n;
// 	if( n == 1){
// 		cout << 1;
// 		return 0;
// 	}
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	int mini = INT_MAX;
// 	vector<int> indx(1e6+2 , -1);
// 	for (int i = 0; i < n; ++i){
// 		if( indx[arr[i]] == -1){
// 			indx[arr[i]] = i;
// 		}
// 		else{
// 			mini = min( indx[arr[i]], mini);
// 		}
// 	}
// 	cout << mini +1 ;
// }

// SUBARRAY WITH GIVEN SUM

// int main(){
// 	int n, sum, x;
// 	cin >> n>> sum;
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i)
// 	{
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	int i =0, j=0, curr =0, strt =0, end =0;
// 	while( j<n && sum <= curr+ arr[j]){
// 		curr += arr[j];
// 		j++;
// 	}
// 	if( curr == sum){
// 		cout << i << " to "<< j;
// 		return 0;
// 	}
// 	while( j<n){
// 		curr += arr[j];
// 		while( curr > sum){
// 			curr -= arr[i];
// 			i++;
// 		}
// 		if( curr == sum){
// 			strt = i+1;
// 			end = j+1;
// 			break;
// 		}
// 		j++;
// 	}
// 	cout << strt << " to "<< end;
// 	return 0;
// }

//SMALLEST POSITIVE MISSING NUMBER:

// int main(){
// 	int x, n;
// 	vector<int> arr;
// 	for (int i = 0; i < n; ++i)
// 	{
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	vector<bool> check( 1e6 + 2, false);
// 	for (int i = 0; i < n; ++i){
// 		if( arr[i] >=0 )
// 		check[arr[i]] = true;
// 	}
// 	int ans = -1;
// 	for (int i = 0; i < check.size(); ++i)
// 	{
// 		if( check[i] == false){
// 			ans = i;
// 			break;
// 		}
// 	}
// 	cout << ans;
// 	return 0;
// }

//PRINTING ALL SUBARRAYS: 

// int main(){
// 	int n, x;
// 	cin >> n;
// 	vector<int> v;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		v.push_back(x);
// 	}
// 	int y =0;
// 	int mx = 0;
// 	while( y<= n){
// 		for (int i = y; i < n; ++i)	{
// 			int sum = 0;
// 			for (int j = y; j <= i; ++j){
// 				sum+= v[j];
// 			}
// 			mx = max(mx, sum);
// 		}y++;
// 	}
// 	cout << mx;
// 	return 0;
// }

// KADANE'S ALGORITHM :

// int main(){
// 	int n,x;
// 	cin >> n;
// 	vector<int> arr;
// 	for(int i=0; i< n; i++){
// 		cin >> x;
// 		arr.push_back(x);
// 	}
// 	int currentSum =0, maxer = INT_MIN;
// 	for( int i=0; i< n; i++){
// 		currentSum += arr[i];
// 		maxer = max(currentSum, maxer);
//		if( currentSum < 0){
// 			currentSum = 0;
// 		}
// 	}
// 	cout << maxer;
// }

// MAX CIRCULAR SUBARRAY SUM:

// int kadane( int n, vector<int> arr){
// 	int sum = 0;
// 	int mx = INT_MIN;
// 	for(int i =0; i<n; i++){
// 		sum+= arr[i];
// 		if (sum < 0){
// 			sum = 0;
// 		} mx = max( mx, sum);
// 	}
// 	return mx;
// }
// int main(){
// 	int n,x;
// 	vector<int> v;
// 	cin >> n;
// 	for (int i = 0; i < n; ++i){
// 		cin >> x;
// 		v.push_back(x);
// 	}
// 	int unwrapped = kadane(n, v);
// 	int wholeSum = 0;
// 	for (int i = 0; i < n; ++i){
// 		wholeSum+= v[i];
// 		v[i] = -v[i];
// 	}
// 	int mxSum = wholeSum + kadane(n, v);
// 	cout << mxSum<< " "<< unwrapped<< " "<< kadane(n, v);
// }

//PAIR SUM PROBLEM :

// int pairSum( vector<int> arr, int n, int x){
// 	sort( arr.begin(),arr.end());
// 	int low = 0 ,high = n-1;
// 	while( high > low){
// 		if( arr[high]+ arr[low] < x ) low++;
// 		else if( arr[high]+ arr[low] > x )  high--;
// 		else {
// 			cout << arr[low]<< " + "<<arr[high];
// 			return 0;
// 		}
// 	}
// 	cout << "NOT FOUND";
// 	return 0;
//  }
// int main(){
//  	int n, x, c;
//  	cin >> n >> x;
//  	vector<int> v;
//  	for(int i =0; i< n; i++){
//  		cin >> c;
//  		v.push_back(c);
//  	}
//  	pairSum(v,n,x);
//  	return 0;
//  }

// types of candles :

// int main(){
//     int x, a, b;
//     cin >> x>> a>> b;
//     int min_AMT = INT_MAX;
//     for( int i=1; i<= x; i++){
//         min_AMT = min( (a*( i* i))+ (b*( abs(x-i) * abs(x-i))) , min_AMT);
//     }
//     cout << min_AMT;
// }
