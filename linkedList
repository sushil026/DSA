#include<bits/stdc++.h>
using namespace std;
class Node{
public:
	int key;
	Node* nxt;
};
//  PRINTING THE LINKED LIST
void printNode( Node* n){
	while( n != NULL){
		cout<< n->key<< " ";
		n = n->nxt;
	}
}
// LENGTH OF A LINKED LIST
void countNode( Node* n){
	int cnt= 0;
	if (n == NULL){
		cout << "Empty list";
	}
	else{
		while( n != NULL){
			cnt++;
			n = n->nxt;
		}
		cout << cnt;
	}
}
// INSERT AT END: 
Node* insertAtEnd( Node* n, int x){
	Node* temp = NULL;
	temp = new Node();
	temp->key= x;
	temp->nxt= NULL;
	n->nxt = temp;
	return temp;
}
// INSERT AT FIRST:
Node* insertAtFirst( Node* n, int x){
	Node* temp = NULL;
	temp = new Node();
	temp->key = x;
	temp->nxt = n;
	return temp;
}
// INSERT AT CERTAIN LOCATION: 
void insertAtPos( Node* n, int x, int pos){
	int c = 1;
	Node* temp= NULL;
	temp = new Node();
	temp-> key = x;
	while( c!= pos-1){
		c++;
		n = n->nxt;
	}
	temp->nxt = n->nxt;
	n->nxt = temp;
}
// 	DELETING AT FIRST:
Node* deleteAtFirst( Node* n){
	if( n == NULL){
		return n;
	}
	else{
		Node* temp= n;
		n = n->nxt;
		free(temp);
		temp = NULL;
	}
	return n;
}
//	DELETING AT END:
void deleteAtEnd( Node* n){
	if( n == NULL){ //for empty linked list
		cout << "Empty List";
	}
	else if( n->nxt == NULL){ //for list with only 1 element
		free(n);
		n = NULL;
	}
	else{
		Node* temp= n;
		while( temp->nxt->nxt != NULL){
			temp = temp->nxt;
		}
		free(temp->nxt);
		temp->nxt = NULL;
	}
}

int main(){
	Node* first= NULL;
	Node* last= NULL;
	//first = new Node();
	//last = new Node();
	//first->key= 12;
	//first->nxt= last;
	last = insertAtEnd( last, 56);
	first = insertAtFirst( first,65);
	printNode(first);
	first = deleteAtFirst(first);
	deleteAtEnd(first);
	printNode(first);
}
